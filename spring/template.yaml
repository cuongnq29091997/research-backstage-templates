apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: v1beta3-demo
  title: Spring template
  description: Spring template - for research Backstage Software Template
spec:
  owner: cuongnq5
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Project metadata
      required:
        - group
        - artifact
        - name
        - owner
      properties:
        group:
          title: Group
          type: string
          description: Project GroupID
          ui:autofocus: true
        artifact:
          title: Artifact
          type: string
          description: Project Artifact
        name:
          title: Name
          type: string
          description: Project Name
        description:
          title: Project description
          type: string
          description: Project description
        owner:
          title: Owner
          type: string
          description: Owner by team
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          group: ${{ parameters.group }}
          artifact: ${{ parameters.artifact }}
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}